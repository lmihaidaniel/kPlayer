/*! kmlplayer.js - v0.3.1 */
var kmlPlayer = (function () {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
  };

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  var inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  var possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  (function(){var lastTime=0;var vendors=['ms','moz','webkit','o'];for(var x=0;x<vendors.length&&!window.requestAnimationFrame;++x){window.requestAnimationFrame=window[vendors[x]+'RequestAnimationFrame'];window.cancelAnimationFrame=window[vendors[x]+'CancelAnimationFrame']||window[vendors[x]+'CancelRequestAnimationFrame'];}if(!window.requestAnimationFrame||/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent))window.requestAnimationFrame=function(callback,element){var currTime=new Date().getTime();var timeToCall=Math.max(0,16-(currTime-lastTime));var id=window.setTimeout(function(){callback(currTime+timeToCall);},timeToCall);lastTime=currTime+timeToCall;return id;};if(!window.cancelAnimationFrame)window.cancelAnimationFrame=function(id){clearTimeout(id);};})();(function(doc,win){'use strict';if(typeof doc.createEvent!=='function')return false;// no tap events here
  // helpers
  var useJquery=typeof jQuery!=='undefined',msEventType=function msEventType(type){var lo=type.toLowerCase(),ms='MS'+type;return navigator.msPointerEnabled?ms:lo;},// was initially triggered a "touchstart" event?
  wasTouch=false,touchevents={touchstart:msEventType('PointerDown')+' touchstart',touchend:msEventType('PointerUp')+' touchend',touchmove:msEventType('PointerMove')+' touchmove'},setListener=function setListener(elm,events,callback){var eventsArray=events.split(' '),i=eventsArray.length;while(i--){elm.addEventListener(eventsArray[i],callback,false);}},getPointerEvent=function getPointerEvent(event){return event.targetTouches?event.targetTouches[0]:event;},getTimestamp=function getTimestamp(){return new Date().getTime();},sendEvent=function sendEvent(elm,eventName,originalEvent,data){var customEvent=doc.createEvent('Event');customEvent.originalEvent=originalEvent;data=data||{};data.x=currX;data.y=currY;data.distance=data.distance;// jquery
  if(useJquery){customEvent=jQuery.Event(eventName,{originalEvent:originalEvent});jQuery(elm).trigger(customEvent,data);}// addEventListener
  if(customEvent.initEvent){for(var key in data){customEvent[key]=data[key];}customEvent.initEvent(eventName,true,true);elm.dispatchEvent(customEvent);}// detect all the inline events
  // also on the parent nodes
  while(elm){// inline
  if(elm['on'+eventName])elm['on'+eventName](customEvent);elm=elm.parentNode;}},onTouchStart=function onTouchStart(e){/**
       * Skip all the mouse events
       * events order:
       * Chrome:
       *   touchstart
       *   touchmove
       *   touchend
       *   mousedown
       *   mousemove
       *   mouseup <- this must come always after a "touchstart"
       *
       * Safari
       *   touchstart
       *   mousedown
       *   touchmove
       *   mousemove
       *   touchend
       *   mouseup <- this must come always after a "touchstart"
       */// it looks like it was a touch event!
  if(e.type!=='mousedown')wasTouch=true;// skip this event we don't need to track it now
  if(e.type==='mousedown'&&wasTouch)return;var pointer=getPointerEvent(e);// caching the current x
  cachedX=currX=pointer.pageX;// caching the current y
  cachedY=currY=pointer.pageY;longtapTimer=setTimeout(function(){sendEvent(e.target,'longtap',e);target=e.target;},longtapThreshold);// we will use these variables on the touchend events
  timestamp=getTimestamp();tapNum++;},onTouchEnd=function onTouchEnd(e){// skip the mouse events if previously a touch event was dispatched
  // and reset the touch flag
  if(e.type==='mouseup'&&wasTouch){wasTouch=false;return;}var eventsArr=[],now=getTimestamp(),deltaY=cachedY-currY,deltaX=cachedX-currX;// clear the previous timer if it was set
  clearTimeout(dblTapTimer);// kill the long tap timer
  clearTimeout(longtapTimer);if(deltaX<=-swipeThreshold)eventsArr.push('swiperight');if(deltaX>=swipeThreshold)eventsArr.push('swipeleft');if(deltaY<=-swipeThreshold)eventsArr.push('swipedown');if(deltaY>=swipeThreshold)eventsArr.push('swipeup');if(eventsArr.length){for(var i=0;i<eventsArr.length;i++){var eventName=eventsArr[i];sendEvent(e.target,eventName,e,{distance:{x:Math.abs(deltaX),y:Math.abs(deltaY)}});}// reset the tap counter
  tapNum=0;}else{if(cachedX>=currX-tapPrecision&&cachedX<=currX+tapPrecision&&cachedY>=currY-tapPrecision&&cachedY<=currY+tapPrecision){if(timestamp+tapThreshold-now>=0){// Here you get the Tap event
  sendEvent(e.target,tapNum>=2&&target===e.target?'dbltap':'tap',e);target=e.target;}}// reset the tap counter
  dblTapTimer=setTimeout(function(){tapNum=0;},dbltapThreshold);}},onTouchMove=function onTouchMove(e){// skip the mouse move events if the touch events were previously detected
  if(e.type==='mousemove'&&wasTouch)return;var pointer=getPointerEvent(e);currX=pointer.pageX;currY=pointer.pageY;},swipeThreshold=win.SWIPE_THRESHOLD||100,tapThreshold=win.TAP_THRESHOLD||150,// range of time where a tap event could be detected
  dbltapThreshold=win.DBL_TAP_THRESHOLD||200,// delay needed to detect a double tap
  longtapThreshold=win.LONG_TAP_THRESHOLD||1000,// delay needed to detect a long tap
  tapPrecision=win.TAP_PRECISION/2||60/2,// touch events boundaries ( 60px by default )
  justTouchEvents=win.JUST_ON_TOUCH_DEVICES,tapNum=0,currX,currY,cachedX,cachedY,timestamp,target,dblTapTimer,longtapTimer;//setting the events listeners
  // we need to debounce the callbacks because some devices multiple events are triggered at same time
  setListener(doc,touchevents.touchstart+(justTouchEvents?'':' mousedown'),onTouchStart);setListener(doc,touchevents.touchend+(justTouchEvents?'':' mouseup'),onTouchEnd);setListener(doc,touchevents.touchmove+(justTouchEvents?'':' mousemove'),onTouchMove);})(document,window);function inIframe(){try{var is=window.self!==window.top;if(is){var arrFrames=parent.document.getElementsByTagName("IFRAME");for(var i=0;i<arrFrames.length;i++){var frame=arrFrames[i];if(frame.contentWindow===window){is=frame;frame.setAttribute('allowfullscreen','true');frame.setAttribute('mozallowfullscreen','true');frame.setAttribute('webkitallowfullscreen','true');frame.setAttribute('frameborder','0');};}}return is;}catch(e){return true;}}var deepmerge=function(){var deepmerge=function deepmerge(target,src){if(src){var array=Array.isArray(src);var dst=array&&[]||{};if(array){target=target||[];dst=dst.concat(target);src.forEach(function(e,i){if(typeof dst[i]==='undefined'){dst[i]=e;}else if((typeof e==='undefined'?'undefined':_typeof(e))==='object'){dst[i]=deepmerge(target[i],e);}else{if(target.indexOf(e)===-1){dst.push(e);}}});}else{if(target&&(typeof target==='undefined'?'undefined':_typeof(target))==='object'){Object.keys(target).forEach(function(key){dst[key]=target[key];});}Object.keys(src).forEach(function(key){if(_typeof(src[key])!=='object'||!src[key]){dst[key]=src[key];}else{if(!target[key]){dst[key]=src[key];}else{dst[key]=deepmerge(target[key],src[key]);}}});}return dst;}else{return target||[];}};return deepmerge;}();function capitalizeFirstLetter(string){return string.charAt(0).toUpperCase()+string.slice(1);}function procentFromString(v){if(v===undefined||v===null)return false;var t=false;if(v.indexOf){if(v.indexOf('%')>-1){t=parseFloat(v);}}return t;}/**
   * Detect if the argument passed is a function
   * @param   { * } v - whatever you want to pass to this function
   * @returns { Boolean } -
   */function isFunction(v){return typeof v==='function'||false;// avoid IE problems
  }function scaleFont(f,width,el){var r=false,l=false;if(f.units!='px')f.units='em';if(f.min!==false&&f.ratio!==false){r=f.ratio*width/1000;if(r<f.min)r=f.min;if(f.units=='px')r=Math.ceil(r);if(!isNaN(f.lineHeight)&&f.lineHeight){l=r*f.lineHeight;if(l<1)l=1;l=+l.toFixed(3)+f.units;}r=+r.toFixed(3)+f.units;}if(el){if(r)el.style.fontSize=r;if(l)el.style.lineHeight=l;}return{fontSize:r,lineHeight:l};};/**
   * @module dom
   * Module for easing the manipulation of dom elements
   */var classReg=function classReg(c){return new RegExp("(^|\\s+)"+c+"(\\s+|$)");};var hasClass=void 0;var addClass=void 0;var removeClass=void 0;var toggleClass=void 0;if('classList'in document.documentElement){hasClass=function hasClass(elem,c){return elem.classList.contains(c);};addClass=function addClass(elem,c){if(c!=null){c=c.split(' ');for(var k in c){elem.classList.add(c[k]);}}};removeClass=function removeClass(elem,c){elem.classList.remove(c);};}else{hasClass=function hasClass(elem,c){return classReg(c).test(elem.className);};addClass=function addClass(elem,c){if(!hasClass(elem,c)){elem.className=elem.className+' '+c;}};removeClass=function removeClass(elem,c){elem.className=elem.className.replace(classReg(c),' ');};}toggleClass=function toggleClass(elem,c){var fn=hasClass(elem,c)?removeClass:addClass;fn(elem,c);};var getPrefixedStylePropName=function getPrefixedStylePropName(propName){var domPrefixes='Webkit Moz ms O'.split(' '),elStyle=document.documentElement.style;if(elStyle[propName]!==undefined)return propName;// Is supported unprefixed
  propName=propName.charAt(0).toUpperCase()+propName.substr(1);for(var i=0;i<domPrefixes.length;i++){if(elStyle[domPrefixes[i]+propName]!==undefined){return domPrefixes[i]+propName;// Is supported with prefix
  }}};var dom={stylePrefix:{transform:getPrefixedStylePropName('transform'),perspective:getPrefixedStylePropName('perspective'),backfaceVisibility:getPrefixedStylePropName('backfaceVisibility')},triggerWebkitHardwareAcceleration:function triggerWebkitHardwareAcceleration(element){if(this.stylePrefix.backfaceVisibility&&this.stylePrefix.perspective){element.style[this.stylePrefix.perspective]='1000px';element.style[this.stylePrefix.backfaceVisibility]='hidden';}},transform:function transform(element,value){element.style[this.stylePrefix.transform]=value;},/**
    * Shorter and fast way to select multiple nodes in the DOM
    * @param   { String } selector - DOM selector
    * @param   { Object } ctx - DOM node where the targets of our search will is located
    * @returns { Object } dom nodes found
    */selectAll:function selectAll(selector,ctx){return(ctx||document).querySelectorAll(selector);},/**
    * Shorter and fast way to select a single node in the DOM
    * @param   { String } selector - unique dom selector
    * @param   { Object } ctx - DOM node where the target of our search will is located
    * @returns { Object } dom node found
    */select:function select(selector,ctx){return(ctx||document).querySelector(selector);},hasClass:hasClass,addClass:addClass,removeClass:removeClass,toggleClass:toggleClass,autoLineHeight:function autoLineHeight(el){var l=el.offsetHeight+"px";el.style.lineHeight=l;return l;},createElement:function createElement(elm,props){var el=document.createElement(elm);for(var k in props){el.setAttribute(k,props[k]);}return el;},emptyElement:function emptyElement(elm){while(elm.firstChild){elm.removeChild(elm.firstChild);}},replaceElement:function replaceElement(target,elm){target.parentNode.replaceChild(elm,target);},removeElement:function removeElement(element){element.parentNode.removeChild(element);},insertAfter:function insertAfter(el,referenceNode){referenceNode.parentNode.insertBefore(el,referenceNode.nextSibling);},insertBefore:function insertBefore(el,referenceNode){referenceNode.parentNode.insertBefore(el,referenceNode);},getTextContent:function getTextContent(el){return el.textContent||el.innerText;},wrap:function wrap(elements,wrapper){// Convert `elements` to an array, if necessary.
  if(!elements.length){elements=[elements];}// Loops backwards to prevent having to clone the wrapper on the
  // first element (see `child` below).
  for(var i=elements.length-1;i>=0;i--){var child=i>0?wrapper.cloneNode(true):wrapper;var element=elements[i];// Cache the current parent and sibling.
  var parent=element.parentNode;var sibling=element.nextSibling;// Wrap the element (is automatically removed from its current
  // parent).
  child.appendChild(element);// If the element had a sibling, insert the wrapper before
  // the sibling to maintain the HTML structure; otherwise, just
  // append it to the parent.
  if(sibling){parent.insertBefore(child,sibling);}else{parent.appendChild(child);}return child;}}};var browser=function(){var nVer=navigator.appVersion,nAgt=navigator.userAgent,browserName=navigator.appName,fullVersion=''+parseFloat(navigator.appVersion),majorVersion=parseInt(navigator.appVersion,10),nameOffset,verOffset,ix;// EDGE
  if(browserName=="Netscape"&&navigator.appVersion.indexOf('Trident')>-1){browserName="IE";var edge=nAgt.indexOf('Edge/');fullVersion=nAgt.substring(edge+5,nAgt.indexOf('.',edge));}// MSIE 11
  else if(navigator.appVersion.indexOf("Windows NT")!==-1&&navigator.appVersion.indexOf("rv:11")!==-1){browserName="IE";fullVersion="11;";}// MSIE
  else if((verOffset=nAgt.indexOf("MSIE"))!==-1){browserName="IE";fullVersion=nAgt.substring(verOffset+5);}// Chrome
  else if((verOffset=nAgt.indexOf("Chrome"))!==-1){browserName="Chrome";fullVersion=nAgt.substring(verOffset+7);}// Safari
  else if((verOffset=nAgt.indexOf("Safari"))!==-1){browserName="Safari";fullVersion=nAgt.substring(verOffset+7);if((verOffset=nAgt.indexOf("Version"))!==-1){fullVersion=nAgt.substring(verOffset+8);}}// Firefox
  else if((verOffset=nAgt.indexOf("Firefox"))!==-1){browserName="Firefox";fullVersion=nAgt.substring(verOffset+8);}// In most other browsers, "name/version" is at the end of userAgent
  else if((nameOffset=nAgt.lastIndexOf(' ')+1)<(verOffset=nAgt.lastIndexOf('/'))){browserName=nAgt.substring(nameOffset,verOffset);fullVersion=nAgt.substring(verOffset+1);if(browserName.toLowerCase()==browserName.toUpperCase()){browserName=navigator.appName;}}// Trim the fullVersion string at semicolon/space if present
  if((ix=fullVersion.indexOf(";"))!==-1){fullVersion=fullVersion.substring(0,ix);}if((ix=fullVersion.indexOf(" "))!==-1){fullVersion=fullVersion.substring(0,ix);}// Get major version
  majorVersion=parseInt(''+fullVersion,10);if(isNaN(majorVersion)){fullVersion=''+parseFloat(navigator.appVersion);majorVersion=parseInt(navigator.appVersion,10);}// Return data
  return[browserName,majorVersion];}();var device={browser:browser,isIE:function(){if(browser[0]==='IE'){return browser[1];}return false;}(),isFirefox:function(){if(browser[0]==='Firefox'){return browser[1];}return false;}(),isChrome:function(){if(browser[0]==='Chrome'){return browser[1];}return false;}(),isSafari:function(){if(browser[0]==='Safari'){return browser[1];}return false;}(),isTouch:'ontouchstart'in document.documentElement,isIos:/(iPad|iPhone|iPod)/g.test(navigator.platform)};var autoFont=function autoFont(el,font,parent){var _enabled=false;var _update=function _update(){scaleFont(font,parent.width(),el);};this.update=function(v){if(v!==undefined){if(!font){font={ratio:1,min:1,lineHeight:false};}font=deepmerge(font,v);return scaleFont(font,parent.width(),el);}};this.enabled=function(v){if(typeof v==='boolean'&&font){_enabled=v;// v ? (window.addEventListener('resize', _update, false), scaleFont(font, _width(), el)) : window.removeEventListener('resize', _update, false);
  }return _enabled;;};if(parent.on){parent.on('resize',_update);};};var defaults$2={x:0,y:0,width:'100%',height:'100%',fontSize:null,lineHeight:null,offsetX:0,offsetY:0,originPoint:"topLeft",visible:false,transform:{x:null,y:null},translate:true};var adaptiveSizePos=function adaptiveSizePos(setttings,parent){var bounds=function bounds(){return{offsetX:parent.offsetX(),offsetY:parent.offsetY(),width:parent.width(),height:parent.height(),scale:parent.width()/parent.videoWidth(),scaleY:parent.width()/parent.videoHeight()};};var vault={x:0,y:0,width:'100%',height:'100%',fontSize:null,lineHeight:null};var parentWidth=0;var parentHeight=0;var parentX=0;var parentY=0;var domElement=null;var settings=deepmerge(defaults$2,setttings);var _active=false;var updateDomElement=function updateDomElement(){if(_active&&domElement&&domElement.nodeType){if(vault.width!==null)domElement.style.width=vault.width+"px";if(vault.height!==null)domElement.style.height=vault.height+"px";if(dom.stylePrefix.transform&&settings.translate){var transform='';if(vault.x!=null&&vault.y!=null){transform='translate('+vault.x+'px,'+vault.y+'px)';domElement.style.left="auto";domElement.style.right="auto";domElement.style.bottom="auto";domElement.style.top="auto";}else{if(vault.x!=null){domElement.style.left="auto";domElement.style.right="auto";transform='translateX('+vault.x+'px)';}if(vault.y!=null){domElement.style.bottom="auto";domElement.style.top="auto";transform='translateY('+vault.y+'px)';}}dom.transform(domElement,transform);}else{if(vault.x!=null&&vault.y!=null){domElement.style.left=vault.x+"px";domElement.style.top=vault.y+"px";}else{if(vault.x!=null)domElement.style.left=vault.x+"px";if(vault.y!=null)domElement.style.top=vault.y+"px";}}if(settings.fontSize!==vault.fontSize){domElement.style.fontSize=vault.fontSize=settings.fontSize;}if(settings.lineHeight!==vault.lineHeight){domElement.style.lineHeight=vault.lineHeight=settings.lineHeight;}}};var updateProps=function updateProps(){var _w=parent.width();var _h=parent.height();var _x=parent.offsetX();var _y=parent.offsetY();if(parentWidth!=_w||parentHeight!=_h||_x!=parentX||_y!=parentY){parentWidth=_w;parentHeight=_h;parentX=_x;parentY=_y;}else{return;}var b=bounds();var procentWidth=procentFromString(settings.width);if(procentWidth){vault.width=b.width*procentWidth/100;}else{if(settings.width!=null){vault.width=b.width*b.scale;}}vault.width=Math.ceil(vault.width);var procentHeight=procentFromString(settings.height);if(procentHeight){vault.height=b.height*procentHeight/100;}else{if(settings.height!=null){vault.height=b.height*b.scale;}}vault.height=Math.ceil(vault.height);if(settings.x!=null){var procentX=procentFromString(settings.x);if(procentX){vault.x=b.offsetX+b.width*procentX/100;}else{vault.x=b.offsetX+settings.x*b.scale;}vault.x=Math.floor(vault.x);var transformX=procentFromString(settings.transform.x);if(transformX)vault.x+=transformX*vault.width/100;if(settings.offsetX)vault.x+=settings.offsetX;}if(settings.y!=null){var procentY=procentFromString(settings.y);if(procentY){vault.y=b.offsetY+b.height*procentY/100;}else{vault.y=b.offsetY+settings.y*b.scale;}vault.y=Math.floor(vault.y);var transformY=procentFromString(settings.transform.y);if(transformY)vault.y+=transformY*vault.width/100;if(settings.offsetY)vault.y+=settings.offsetY;}updateDomElement();};this.applyTo=function(element){if(element&&element.nodeType){domElement=element;updateProps();}return domElement;};var applyNewProps=function applyNewProps(){if(_active){updateProps();}};this.data=function(){return vault;};this.settings=function(newSettings){settings=deepmerge(settings,newSettings);updateProps();return settings;};this.enabled=function(v){if(typeof v==='boolean'){_active=v;if(v)applyNewProps();// v ? window.addEventListener('resize', applyNewProps, false) : window.removeEventListener('resize', applyNewProps, false);
  }return _active;};if(parent.on){parent.on('resize',applyNewProps);}};function createCommonjsModule(fn,module){return module={exports:{}},fn(module,module.exports),module.exports;}var index=createCommonjsModule(function(module){'use strict';var has=Object.prototype.hasOwnProperty;//
  // We store our EE objects in a plain object whose properties are event names.
  // If `Object.create(null)` is not supported we prefix the event names with a
  // `~` to make sure that the built-in object properties are not overridden or
  // used as an attack vector.
  // We also assume that `Object.create(null)` is available when the event name
  // is an ES6 Symbol.
  //
  var prefix=typeof Object.create!=='function'?'~':false;/**
   * Representation of a single EventEmitter function.
   *
   * @param {Function} fn Event handler to be called.
   * @param {Mixed} context Context for function execution.
   * @param {Boolean} [once=false] Only emit once
   * @api private
   */function EE(fn,context,once){this.fn=fn;this.context=context;this.once=once||false;}/**
   * Minimal EventEmitter interface that is molded against the Node.js
   * EventEmitter interface.
   *
   * @constructor
   * @api public
   */function EventEmitter(){}/* Nothing to set *//**
   * Hold the assigned EventEmitters by name.
   *
   * @type {Object}
   * @private
   */EventEmitter.prototype._events=undefined;/**
   * Return an array listing the events for which the emitter has registered
   * listeners.
   *
   * @returns {Array}
   * @api public
   */EventEmitter.prototype.eventNames=function eventNames(){var events=this._events,names=[],name;if(!events)return names;for(name in events){if(has.call(events,name))names.push(prefix?name.slice(1):name);}if(Object.getOwnPropertySymbols){return names.concat(Object.getOwnPropertySymbols(events));}return names;};/**
   * Return a list of assigned event listeners.
   *
   * @param {String} event The events that should be listed.
   * @param {Boolean} exists We only need to know if there are listeners.
   * @returns {Array|Boolean}
   * @api public
   */EventEmitter.prototype.listeners=function listeners(event,exists){var evt=prefix?prefix+event:event,available=this._events&&this._events[evt];if(exists)return!!available;if(!available)return[];if(available.fn)return[available.fn];for(var i=0,l=available.length,ee=new Array(l);i<l;i++){ee[i]=available[i].fn;}return ee;};/**
   * Emit an event to all registered event listeners.
   *
   * @param {String} event The name of the event.
   * @returns {Boolean} Indication if we've emitted an event.
   * @api public
   */EventEmitter.prototype.emit=function emit(event,a1,a2,a3,a4,a5){var evt=prefix?prefix+event:event;if(!this._events||!this._events[evt])return false;var listeners=this._events[evt],len=arguments.length,args,i;if('function'===typeof listeners.fn){if(listeners.once)this.removeListener(event,listeners.fn,undefined,true);switch(len){case 1:return listeners.fn.call(listeners.context),true;case 2:return listeners.fn.call(listeners.context,a1),true;case 3:return listeners.fn.call(listeners.context,a1,a2),true;case 4:return listeners.fn.call(listeners.context,a1,a2,a3),true;case 5:return listeners.fn.call(listeners.context,a1,a2,a3,a4),true;case 6:return listeners.fn.call(listeners.context,a1,a2,a3,a4,a5),true;}for(i=1,args=new Array(len-1);i<len;i++){args[i-1]=arguments[i];}listeners.fn.apply(listeners.context,args);}else{var length=listeners.length,j;for(i=0;i<length;i++){if(listeners[i].once)this.removeListener(event,listeners[i].fn,undefined,true);switch(len){case 1:listeners[i].fn.call(listeners[i].context);break;case 2:listeners[i].fn.call(listeners[i].context,a1);break;case 3:listeners[i].fn.call(listeners[i].context,a1,a2);break;default:if(!args)for(j=1,args=new Array(len-1);j<len;j++){args[j-1]=arguments[j];}listeners[i].fn.apply(listeners[i].context,args);}}}return true;};/**
   * Register a new EventListener for the given event.
   *
   * @param {String} event Name of the event.
   * @param {Function} fn Callback function.
   * @param {Mixed} [context=this] The context of the function.
   * @api public
   */EventEmitter.prototype.on=function on(event,fn,context){var listener=new EE(fn,context||this),evt=prefix?prefix+event:event;if(!this._events)this._events=prefix?{}:Object.create(null);if(!this._events[evt])this._events[evt]=listener;else{if(!this._events[evt].fn)this._events[evt].push(listener);else this._events[evt]=[this._events[evt],listener];}return this;};/**
   * Add an EventListener that's only called once.
   *
   * @param {String} event Name of the event.
   * @param {Function} fn Callback function.
   * @param {Mixed} [context=this] The context of the function.
   * @api public
   */EventEmitter.prototype.once=function once(event,fn,context){var listener=new EE(fn,context||this,true),evt=prefix?prefix+event:event;if(!this._events)this._events=prefix?{}:Object.create(null);if(!this._events[evt])this._events[evt]=listener;else{if(!this._events[evt].fn)this._events[evt].push(listener);else this._events[evt]=[this._events[evt],listener];}return this;};/**
   * Remove event listeners.
   *
   * @param {String} event The event we want to remove.
   * @param {Function} fn The listener that we need to find.
   * @param {Mixed} context Only remove listeners matching this context.
   * @param {Boolean} once Only remove once listeners.
   * @api public
   */EventEmitter.prototype.removeListener=function removeListener(event,fn,context,once){var evt=prefix?prefix+event:event;if(!this._events||!this._events[evt])return this;var listeners=this._events[evt],events=[];if(fn){if(listeners.fn){if(listeners.fn!==fn||once&&!listeners.once||context&&listeners.context!==context){events.push(listeners);}}else{for(var i=0,length=listeners.length;i<length;i++){if(listeners[i].fn!==fn||once&&!listeners[i].once||context&&listeners[i].context!==context){events.push(listeners[i]);}}}}//
  // Reset the array, or remove it completely if we have no more listeners.
  //
  if(events.length){this._events[evt]=events.length===1?events[0]:events;}else{delete this._events[evt];}return this;};/**
   * Remove all listeners or only the listeners for the specified event.
   *
   * @param {String} event The event want to remove all listeners for.
   * @api public
   */EventEmitter.prototype.removeAllListeners=function removeAllListeners(event){if(!this._events)return this;if(event)delete this._events[prefix?prefix+event:event];else this._events=prefix?{}:Object.create(null);return this;};//
  // Alias methods names because people roll like that.
  //
  EventEmitter.prototype.off=EventEmitter.prototype.removeListener;EventEmitter.prototype.addListener=EventEmitter.prototype.on;//
  // This function doesn't apply anymore.
  //
  EventEmitter.prototype.setMaxListeners=function setMaxListeners(){return this;};//
  // Expose the prefix.
  //
  EventEmitter.prefixed=prefix;//
  // Expose the module.
  //
  if('undefined'!==typeof module){module.exports=EventEmitter;}});var Events=index&&(typeof index==='undefined'?'undefined':_typeof(index))==='object'&&'default'in index?index['default']:index;var defaults$3={x:0,y:0,width:0,height:0};var relativeSizePos=function relativeSizePos(ctx,settings){var parentWidth=ctx.videoWidth()||ctx.width||1;var parentHeight=ctx.videoHeight()||ctx.height||1;var o=deepmerge(defaults$3,settings);var _w=procentFromString(o.width);if(_w===false)_w=o.width/parentWidth*100;var _h=procentFromString(o.height);if(_h===false)_h=o.height/parentHeight*100;var _x=procentFromString(o.x);if(_x===false)_x=o.x/parentWidth*100;var _y=procentFromString(o.y);if(_y===false)_y=o.y/parentHeight*100;return{x:_x,y:_y,width:_w,height:_h};};var Container=function(_Events){inherits(Container,_Events);function Container(el,opts,ctx,player){classCallCheck(this,Container);var playerPaused=false;var isVisible=false;var externalControls=false;var body=dom.select('.body',el);var _this=possibleConstructorReturn(this,_Events.call(this));_this.ctx=ctx;_this.body=body;_this.config=function(fopts){if(fopts)opts=deepmerge(opts,fopts);var d=new relativeSizePos(player,opts);body.style.width=d.width+"%";body.style.height=d.height+"%";if(dom.stylePrefix.transform){dom.transform(body,'translate('+100/d.width*d.x+'%,'+100/d.height*d.y+'%)');}else{body.style.top=d.x+"%";body.style.left=d.y+"%";}this.emit('config');};_this.config();player.on('resize',_this.config);_this.hide=function(){if(isVisible){_this.emit('beforeHide');dom.addClass(el,'hidden');isVisible=false;if(opts.pause){if(!playerPaused){player.play();}if(externalControls&&opts.externalControls){player.externalControls.enabled(true);}}setTimeout(function(){el.style.display="none";if(isFunction(opts.onHide))opts.onHide();ctx.checkVisibleElements();_this.emit('hide');},250);}};_this.show=function(){if(!isVisible){isVisible=true;_this.emit('beforeShow');ctx.enabled(true);el.style.display="block";setTimeout(function(){dom.removeClass(el,'hidden');if(isFunction(opts.onHide))opts.onShow();_this.emit('show');},50);if(opts.pause){if(!player.paused()){playerPaused=false;player.pause();}else{playerPaused=true;}}if(opts.externalControls){if(player.externalControls.enabled()){externalControls=true;player.externalControls.enabled(false);}else{externalControls=true;}}}};if(opts.visible){_this.show();}_this.visible=function(v){if(typeof v==='boolean')isVisible=v;return isVisible;};return _this;}Container.prototype.destroy=function destroy(){console.log("container");this.removeAllListeners();this.ctx.remove(this.body);};return Container;}(Events);var Popup=function(_Container){inherits(Popup,_Container);function Popup(el,opts,ctx,parentPlayer){classCallCheck(this,Popup);var _this2=possibleConstructorReturn(this,_Container.call(this,el,opts,ctx,parentPlayer));var overlay=dom.createElement('div');dom.addClass(overlay,'overlay triggerClose');dom.insertBefore(overlay,_this2.body);//header
  var header=document.createElement('h1');dom.addClass(header,'header');_this2._title=document.createElement('span');header.appendChild(_this2._title);_this2._closeBtn=document.createElement('a');_this2._closeBtn.innerHTML="<img src='svg/ic_close.svg'/>";dom.addClass(_this2._closeBtn,'closeBtn');_this2._closeBtn.addEventListener('click',_this2.hide);header.appendChild(_this2._closeBtn);_this2.body.appendChild(header);//end header
  _this2.backgroundColor=function(v){if(v!=null){overlay.style.backgroundColor=v;}return overlay.style.backgroundColor;};_this2.scaleSize=function(s){this.config({x:(100-s)/2+"%",y:(100-s)/2+"%",width:s+"%",height:s+"%"});};//EVENTS
  parentPlayer.on('resize',function(){_this2.emit('resize');});['resize','config','beforeShow'].map(function(evt){_this2.on(evt,function(){console.log(evt);_this2.autoLineHeight();});});var clsElements=dom.selectAll('.triggerClose',el);for(var i=0,n=clsElements.length;i<n;i+=1){clsElements[i].addEventListener('click',_this2.hide);}return _this2;}Popup.prototype.destroy=function destroy(){console.log('popup');this.removeAllListeners();this.ctx.remove(this.body);dom.removeElement(this.body.parentNode);};Popup.prototype.autoLineHeight=function autoLineHeight(el){if(this.visible()){if(el){dom.autoLineHeight(el);}else{dom.autoLineHeight(this._title.parentNode);}}};Popup.prototype.title=function title(v){if(v!=null){this._title.innerHTML=v;this.autoLineHeight();return v;}return this._title.innerHTML;};return Popup;}(Container);function ErrorFormatException(msg){try{throw new Error(msg);}catch(e){console.log(e.name+': '+e.message);return;}}function scrollPosition(){var x=0;var y=0;this.save=function(){x=window.pageXOffset||0;y=window.pageYOffset||0;};this.restore=function(){window.scrollTo(x,y);};}// Fullscreen API
  var supportsFullScreen=false;var browserPrefixes='webkit moz o ms khtml'.split(' ');var prefixFS='';//Check for native support
  if(typeof document.cancelFullScreen!=='undefined'){supportsFullScreen=true;}else{// Check for fullscreen support by vendor prefix
  for(var i=0,il=browserPrefixes.length;i<il;i++){prefixFS=browserPrefixes[i];if(typeof document[prefixFS+'CancelFullScreen']!=='undefined'){supportsFullScreen=true;break;}// Special case for MS (when isn't it?)
  else if(typeof document.msExitFullscreen!=='undefined'&&document.msFullscreenEnabled){prefixFS='ms';supportsFullScreen=true;break;}}}var eventChange=prefixFS===''?'fullscreenchange':prefixFS+(prefixFS=='ms'?'fullscreenchange':'fullscreenchange');eventChange=eventChange.toLowerCase();//supportsFullScreen = false;
  var Fullscreen=function(_Events2){inherits(Fullscreen,_Events2);function Fullscreen(){classCallCheck(this,Fullscreen);var _this3=possibleConstructorReturn(this,_Events2.call(this));_this3.iframe=null;_this3.scrollPosition=new scrollPosition();_this3._fullscreenElement=null;_this3.fullscreenElementStyle={};if(supportsFullScreen){var fnFullscreenChange=function fnFullscreenChange(){if(!_this3.isFullScreen()){setTimeout(_this3.scrollPosition.restore,100);}};document.addEventListener(eventChange,fnFullscreenChange,false);}return _this3;}Fullscreen.prototype.defualtFullScreenElement=function defualtFullScreenElement(element){var el=element;if(el==null){if(this.iframe){el=this.iframe;}else{el=this.wrapper;}}return el;};Fullscreen.prototype.onFullscreenChange=function onFullscreenChange(evt){//investigate if native video fullscreen can be overwritten
  this.media.addEventListener(eventChange,function(e){e.preventDefault();e.stopPropagation;return false;},true);};Fullscreen.prototype.isFullWindow=function isFullWindow(){return false;};Fullscreen.prototype.isFullScreen=function isFullScreen(element){if(supportsFullScreen){var el=this.defualtFullScreenElement(element);switch(prefixFS){case'':return document.fullscreenElement==el;case'moz':return document.mozFullScreenElement==el;default:return document[prefixFS+'FullscreenElement']==el;}}else{return this.isFullWindow();}};Fullscreen.prototype.requestFullWindow=function requestFullWindow(element){if(this.isFullWindow())return;if(supportsFullScreen&&this.isFullScreen())return;var el=this.defualtFullScreenElement(element);this.scrollPosition.save();// let style = window.getComputedStyle(element);
  var style=el.style;this.fullscreenElementStyle['position']=style.position||"";this.fullscreenElementStyle['margin']=style.margin||"";this.fullscreenElementStyle['top']=style.top||"";this.fullscreenElementStyle['left']=style.left||"";this.fullscreenElementStyle['width']=style.width||"";this.fullscreenElementStyle['height']=style.height||"";this.fullscreenElementStyle['zIndex']=style.zIndex||"";this.fullscreenElementStyle['maxWidth']=style.maxWidth||"";this.fullscreenElementStyle['maxHeight']=style.maxHeight||"";el.style.position="absolute";el.style.top=el.style.left=0;el.style.margin=0;el.style.maxWidth=el.style.maxHeight=el.style.width=el.style.height="100%";el.style.zIndex=2147483647;this._fullscreenElement=el;this.isFullWindow=function(){return true;};};Fullscreen.prototype.requestFullScreen=function requestFullScreen(element){var el=this.defualtFullScreenElement(element);if(supportsFullScreen){this.scrollPosition.save();return prefixFS===''?el.requestFullScreen():el[prefixFS+(prefixFS=='ms'?'RequestFullscreen':'RequestFullScreen')]();}else{this.requestFullWindow(el);}};Fullscreen.prototype.cancelFullWindow=function cancelFullWindow(){if(!this.isFullWindow())return;if(supportsFullScreen&&this.isFullScreen())return;for(var k in this.fullscreenElementStyle){this._fullscreenElement.style[k]=this.fullscreenElementStyle[k];}this._fullscreenElement=null;this.isFullWindow=function(){return false;};this.scrollPosition.restore();};Fullscreen.prototype.cancelFullScreen=function cancelFullScreen(){if(supportsFullScreen){return prefixFS===''?document.cancelFullScreen():document[prefixFS+(prefixFS=='ms'?'ExitFullscreen':'CancelFullScreen')]();}else{this.cancelFullWindow();}};Fullscreen.prototype.toggleFullWindow=function toggleFullWindow(element){var isFullscreen=!this.isFullWindow();if(isFullscreen){this.requestFullWindow(element);//document.body.style.overflow = 'hidden';
  }else{this.cancelFullWindow();//document.body.style.overflow = '';
  }};Fullscreen.prototype.toggleFullScreen=function toggleFullScreen(element){var isFullscreen=this.isFullScreen();if(!isFullscreen){this.requestFullScreen(element);//document.body.style.overflow = 'hidden';
  }else{this.cancelFullScreen();//document.body.style.overflow = '';
  }};Fullscreen.prototype.fullscreenElement=function fullscreenElement(){if(supportsFullScreen){return prefixFS===''?document.fullscreenElement:document[prefixFS+'FullscreenElement'];}else{return this._fullscreenElement;}};return Fullscreen;}(Events);;function _cancelRequests(media){// Remove child sources
  var sources=dom.selectAll('source',media);for(var i=0;i<sources.length;i++){dom.removeElement(sources[i]);}// Set blank video src attribute
  // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error
  // Small mp4: https://github.com/mathiasbynens/small/blob/master/mp4.mp4
  // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection
  media.setAttribute('src','data:video/mp4;base64,AAAAHGZ0eXBpc29tAAACAGlzb21pc28ybXA0MQAAAAhmcmVlAAAAGm1kYXQAAAGzABAHAAABthBgUYI9t+8AAAMNbW9vdgAAAGxtdmhkAAAAAMXMvvrFzL76AAAD6AAAACoAAQAAAQAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAABhpb2RzAAAAABCAgIAHAE/////+/wAAAiF0cmFrAAAAXHRraGQAAAAPxcy++sXMvvoAAAABAAAAAAAAACoAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAAAgAAAAIAAAAAAG9bWRpYQAAACBtZGhkAAAAAMXMvvrFzL76AAAAGAAAAAEVxwAAAAAALWhkbHIAAAAAAAAAAHZpZGUAAAAAAAAAAAAAAABWaWRlb0hhbmRsZXIAAAABaG1pbmYAAAAUdm1oZAAAAAEAAAAAAAAAAAAAACRkaW5mAAAAHGRyZWYAAAAAAAAAAQAAAAx1cmwgAAAAAQAAAShzdGJsAAAAxHN0c2QAAAAAAAAAAQAAALRtcDR2AAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgACABIAAAASAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGP//AAAAXmVzZHMAAAAAA4CAgE0AAQAEgICAPyARAAAAAAMNQAAAAAAFgICALQAAAbABAAABtYkTAAABAAAAASAAxI2IAMUARAEUQwAAAbJMYXZjNTMuMzUuMAaAgIABAgAAABhzdHRzAAAAAAAAAAEAAAABAAAAAQAAABxzdHNjAAAAAAAAAAEAAAABAAAAAQAAAAEAAAAUc3RzegAAAAAAAAASAAAAAQAAABRzdGNvAAAAAAAAAAEAAAAsAAAAYHVkdGEAAABYbWV0YQAAAAAAAAAhaGRscgAAAAAAAAAAbWRpcmFwcGwAAAAAAAAAAAAAAAAraWxzdAAAACOpdG9vAAAAG2RhdGEAAAABAAAAAExhdmY1My4yMS4x');// Load the new empty source
  // This will cancel existing requests
  // See https://github.com/Selz/plyr/issues/174
  media.load();// Debugging
  console.log("Cancelled network requests for old media");}function mimeVideo(media,type){switch(type){case'video/webm':return!!(media.canPlayType&&media.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/no/,''));case'video/mp4':return!!(media.canPlayType&&media.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"').replace(/no/,''));case'video/ogg':return!!(media.canPlayType&&media.canPlayType('video/ogg; codecs="theora"').replace(/no/,''));}}//https://www.w3.org/2010/05/video/mediaevents.html
  var _events=['ended','progress','stalled','playing','waiting','canplay','canplaythrough','loadstart','loadeddata','loadedmetadata','timeupdate','volumechange','play','playing','pause','error','seeking','emptied','seeked','ratechange','suspend'];var Media=function(_Fullscreen){inherits(Media,_Fullscreen);function Media(el){classCallCheck(this,Media);var _this4=possibleConstructorReturn(this,_Fullscreen.call(this));if(el==null){ErrorFormatException("You need to supply a HTMLVideoElement to instantiate the player");return possibleConstructorReturn(_this4);}_this4.media=el;_events.forEach(function(k){el.addEventListener(k,function(){_this4.emit(k);});});_this4.canPlay={mp4:mimeVideo(el,'video/mp4'),webm:mimeVideo(el,'video/webm'),ogg:mimeVideo(el,'video/ogg')};return _this4;}/*** Global attributes *//* A Boolean attribute; if specified, the video automatically begins to play back as soon as it can do so without stopping to finish loading the data. If not return the auoplay attribute. */Media.prototype.autoplay=function autoplay(v){if(typeof v==='boolean'){this.media.autoplay=v;}return this.media.autoplay;};/* Returns the time ranges of the buffered media. This attribute contains a TimeRanges object */Media.prototype.buffered=function buffered(){return this.media.buffered;};/* If this attribute is present, the browser will offer controls to allow the user to control video playback, including volume, seeking, and pause/resume playback. When not set returns if the controls are present */Media.prototype.nativeControls=function nativeControls(v){if(typeof v==='boolean'){this.media.controls=v;}return this.media.controls;};/* anonymous, use-credentials, false */Media.prototype.crossorigin=function crossorigin(v){if(v==='use-credentials'){this.media.crossOrigin='use-credentials';return v;}if(v){this.media.crossOrigin='anonymous';return'anonymous';}if(v===false)this.media.crossOrigin=null;return this.media.crossOrigin;};/* A Boolean attribute; if specified, we will, upon reaching the end of the video, automatically seek back to the start. */Media.prototype.loop=function loop(v){if(typeof v==='boolean'){this.media.loop=v;}return this.media.loop;};/*A Boolean attribute which indicates the default setting of the audio contained in the video. If set, the audio will be initially silenced. Its default value is false, meaning that the audio will be played when the video is played*/Media.prototype.muted=function muted(v){if(typeof v==='boolean'){this.media.muted=v;}return this.media.muted;};/* Mute the video */Media.prototype.mute=function mute(){this.muted(true);};/* UnMute the video */Media.prototype.unmute=function unmute(){this.muted(false);};/* Toggle the muted stance of the video */Media.prototype.toggleMute=function toggleMute(){return this.muted(!this.muted());};/* Returns A TimeRanges object indicating all the ranges of the video that have been played.*/Media.prototype.played=function played(){return this.media.played;};/*
   This enumerated attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience. It may have one of the following values:
   	none: indicates that the video should not be preloaded.
   	metadata: indicates that only video metadata (e.g. length) is fetched.
   	auto: indicates that the whole video file could be downloaded, even if the user is not expected to use it.
   the empty string: synonym of the auto value.
   */Media.prototype.preload=function preload(v){if(v==='metadata'||v==="meta"){this.media.preload='metadata';return'metadata';}if(v){this.media.preload='auto';return'auto';}if(v===false){this.media.preload='none';return'none';}return this.media.preload;};/* Gives or returns the address of an image file that the user agent can show while no video data is available. The attribute, if present, must contain a valid non-empty URL potentially surrounded by spaces */Media.prototype.poster=function poster(v){if(v!==undefined){this.media.poster=v;}return this.media.poster;};/* The src property sets or returns the current source of the audio/video, The source is the actual location (URL) of the audio/video file */Media.prototype.src=function src(v){if(v!==undefined){_cancelRequests(this.media);if(v instanceof Array){for(var i=0,n=v.length;i+=1;){if(v[i]['type']==="video/mp4"&&this.canPlay.mp4){return this.media.src=v[i]['src'];}if(v[i]['type']==="video/webm"&&this.canPlay.webm){return this.media.src=v[i]['src'];}if(v[i]['type']==="video/ogg"&&this.canPlay.ogg){return this.media.src=v[i]['src'];}}}else if(v.src&&v.type){this.media.src=v.src;}else{this.media.src=v;}}return this.media.currentSrc;};/*** Global Events *//* Starts playing the audio/video */Media.prototype.play=function play(){this.media.play();};/* Pauses the currently playing audio/video */Media.prototype.pause=function pause(){this.media.pause();};/* Return the currently playing status of audio/video */Media.prototype.paused=function paused(){return this.media.paused;};/* Return the currently playing status of audio/video */Media.prototype.playing=function playing(){return this.media.paused;};/* Toggle play/pause for the audio/video */Media.prototype.togglePlay=function togglePlay(){this.media.paused?this.play():this.pause();};Media.prototype.currentTime=function currentTime(v){if(v===null||isNaN(v)){return this.media.currentTime;}v=parseFloat(v);if(v>this.media.duration){v=this.media.duration;}if(v<0){v=0;}this.media.currentTime=v;return v;};Media.prototype.seek=function seek(v){return this.currentTime(v);};/**
    * [Re-loads the audio/video element, update the audio/video element after changing the source or other settings]
    * @return {[type]} [description]
    */Media.prototype.load=function load(v){if(v!==undefined){this.src(v);}this.media.load();};Media.prototype.duration=function duration(){return this.media.duration;};Media.prototype.volume=function volume(v){// Return current volume if value 
  if(v===null||isNaN(v)){return this.media.volume;}v=parseFloat(v);if(v>1){v=1;}if(v<0){v=0;}this.media.volume=v;return v;};return Media;}(Fullscreen);var containerBounds=function(){var scale=0;var bounds=function bounds(el,updateScale){if(updateScale!==undefined)scale=updateScale;var data={wrapperWidth:el.offsetWidth,wrapperHeight:el.offsetHeight,scale:scale||el.width/el.height,width:0,height:0,offsetX:0,offsetY:0};data['wrapperScale']=data.wrapperWidth/data.wrapperHeight;if(data.wrapperScale>data.scale){data.height=data.wrapperHeight;data.width=data.scale*data.height;data.offsetX=(data.wrapperWidth-data.width)/2;}else{data.width=data.wrapperWidth;data.height=data.width/data.scale;data.offsetY=(data.wrapperHeight-data.height)/2;}return data;};return bounds;}();var _doc=document||{};// Set the name of the hidden property and the change event for visibility
  var hidden;var visibilityChange;if(typeof _doc.hidden!=="undefined"){// Opera 12.10 and Firefox 18 and later support 
  hidden="hidden";visibilityChange="visibilitychange";}else if(typeof _doc.mozHidden!=="undefined"){hidden="mozHidden";visibilityChange="mozvisibilitychange";}else if(typeof _doc.msHidden!=="undefined"){hidden="msHidden";visibilityChange="msvisibilitychange";}else if(typeof _doc.webkitHidden!=="undefined"){hidden="webkitHidden";visibilityChange="webkitvisibilitychange";}var isAvailable=function isAvailable(){return!(typeof _doc[hidden]==="undefined");};function pageVisibility(_media){var _this5=this;var settings=arguments.length<=1||arguments[1]===undefined?{}:arguments[1];var _available=isAvailable();if(_available){(function(){var _enabled=false;var _playing=false;var paused=false;var setFlagPlaying=function setFlagPlaying(){_playing=true;};var events={visible:function visible(){},hidden:function hidden(){}};var destroyVisibility=function destroyVisibility(){events={visible:function visible(){},hidden:function hidden(){}};_enabled=false;_playing=false;_doc.removeEventListener(visibilityChange,handleVisibilityChange,false);_media.removeEventListener('playing',setFlagPlaying);};var handleVisibilityChange=function handleVisibilityChange(){if(_enabled){if(_doc[hidden]){if(_playing&&!_media.paused){_media.pause();paused=true;}events.hidden();}else{if(paused&&_media.paused){_media.play();paused=false;}events.visible();}}};var initVisibility=function initVisibility(settings){if(_available){_doc.removeEventListener(visibilityChange,handleVisibilityChange,false);_media.removeEventListener('playing',setFlagPlaying);events.visible=settings.onVisible||events.visible;events.hidden=settings.onHidden||events.hidden;_enabled=true;_doc.addEventListener(visibilityChange,handleVisibilityChange,false);_media.addEventListener('playing',setFlagPlaying);}};events.visible=settings.onVisible||events.visible;events.hidden=settings.onHidden||events.hidden;_enabled=true;_doc.addEventListener(visibilityChange,handleVisibilityChange,false);_media.addEventListener('playing',setFlagPlaying);_this5.init=initVisibility;_this5.destroy=destroyVisibility;_this5.on=function(event,fn){if(event in events)events[event]=fn;};_this5.enabled=function(v){if(typeof v==='boolean')_enabled=v;return _enabled;};})();};};var _doc$1=document||{};var externalControls=function externalControls(el){var _enabled=true;var _seek=true;var _tId=null;var media=el;var keydown=function keydown(e){if(_enabled){//bypass default native external controls when media is focused
  media.parentNode.focus();if(e.keyCode==32){//space
  if(media.paused){media.play();}else{media.pause();}}if(_seek){if(e.keyCode==37){//left
  media.currentTime=media.currentTime-5;return;}if(e.keyCode==39){//right
  media.currentTime=media.currentTime+5;return;}}if(e.keyCode==38){//up
  var v=media.volume;v+=.1;if(v>1)v=1;media.volume=v;return;}if(e.keyCode==40){//down
  var _v=media.volume;_v-=.1;if(_v<0)_v=0;media.volume=_v;return;}/*if (self.controlBar) {
     	if (self.controlBar.volumeMenuButton) {
     		if (e.keyCode == 40 || e.keyCode == 38) {
     				self.controlBar.volumeMenuButton.menuContent.el_.className = "vjs-menu show";
     		}
     	}
     }*/}};// this.onSpace = function() {
  // };
  var keyup=function keyup(e){if(_enabled){// if (e.keyCode == 40 || e.keyCode == 38) {
  // 	clearInterval(_tId);
  // 	if (self.controlBar.volumeMenuButton) {
  // 		_tId = setTimeout(function() {
  // 			self.controlBar.volumeMenuButton.menuContent.el_.className = "vjs-menu";
  // 		}, 500);
  // 	}
  // }
  }};this.enabled=function(b){if(b===undefined)return _enabled;_enabled=b;};this.seekEnabled=function(b){if(b===undefined)return _seek;_seek=b;};this.init=function(){_enabled=true;_tId=null;_seek=true;_doc$1.body.addEventListener('keydown',keydown.bind(this),false);_doc$1.body.addEventListener('keyup',keyup.bind(this),false);};this.destroy=function(){_enabled=false;_tId=null;_seek=true;_doc$1.body.removeEventListener('keydown',keydown);_doc$1.body.removeEventListener('keyup',keyup);};this.init();};//https://github.com/fdaciuk/ajax
  var _ajax=function(){function ajax(options){var methods=['get','post','put','delete'];options=options||{};options.baseUrl=options.baseUrl||'';if(options.method&&options.url){return xhrConnection(options.method,options.baseUrl+options.url,maybeData(options.data),options);}return methods.reduce(function(acc,method){acc[method]=function(url,data){return xhrConnection(method,options.baseUrl+url,maybeData(data),options);};return acc;},{});}function maybeData(data){return data||null;}function xhrConnection(type,url,data,options){var returnMethods=['then','catch','always'];var promiseMethods=returnMethods.reduce(function(promise,method){promise[method]=function(callback){promise[method]=callback;return promise;};return promise;},{});var xhr=new XMLHttpRequest();xhr.open(type,url,true);xhr.withCredentials=options.hasOwnProperty('withCredentials');setHeaders(xhr,options.headers);xhr.addEventListener('readystatechange',ready(promiseMethods,xhr),false);xhr.send(objectToQueryString(data));promiseMethods.abort=function(){return xhr.abort();};return promiseMethods;}function setHeaders(xhr,headers){headers=headers||{};if(!hasContentType(headers)){headers['Content-Type']='application/x-www-form-urlencoded';}Object.keys(headers).forEach(function(name){headers[name]&&xhr.setRequestHeader(name,headers[name]);});}function hasContentType(headers){return Object.keys(headers).some(function(name){return name.toLowerCase()==='content-type';});}function ready(promiseMethods,xhr){return function handleReady(){if(xhr.readyState===xhr.DONE){xhr.removeEventListener('readystatechange',handleReady,false);promiseMethods.always.apply(promiseMethods,parseResponse(xhr));if(xhr.status>=200&&xhr.status<300){promiseMethods.then.apply(promiseMethods,parseResponse(xhr));}else{promiseMethods.catch.apply(promiseMethods,parseResponse(xhr));}}};}function parseResponse(xhr){var result;try{result=JSON.parse(xhr.responseText);}catch(e){result=xhr.responseText;}return[result,xhr];}function objectToQueryString(data){return isObject(data)?getQueryString(data):data;}function isObject(data){return Object.prototype.toString.call(data)==='[object Object]';}function getQueryString(object){return Object.keys(object).reduce(function(acc,item){var prefix=!acc?'':acc+'&';return prefix+encode(item)+'='+encode(object[item]);},'');}function encode(value){return encodeURIComponent(value);}return ajax;}();var fn_contextmenu$1=function fn_contextmenu$1(e){e.stopPropagation();e.preventDefault();return false;};var defaults$4={videoWidth:920,videoHeight:520,autoplay:false,loop:false,controls:false,font:{ratio:1,min:.5,units:"em"},contextMenu:false};var Player=function(_Media){inherits(Player,_Media);function Player(settings,_events){classCallCheck(this,Player);var el=settings.video;var _this6=possibleConstructorReturn(this,_Media.call(this,el));if(el==null)return possibleConstructorReturn(_this6);_this6.device=device;_this6.__settings={};dom.addClass(el,"kml"+capitalizeFirstLetter(el.nodeName.toLowerCase()));_this6.wrapper=dom.wrap(_this6.media,dom.createElement('div',{class:'kmlPlayer'}));dom.triggerWebkitHardwareAcceleration(_this6.wrapper);//initSettings
  _this6.settings(deepmerge(defaults$4,settings));//initPageVisibility
  _this6.pageVisibility=new pageVisibility(el);//initexternalControls
  _this6.externalControls=new externalControls(el);//initCallbackEvents
  for(var evt in _events){_this6.on(evt,_events[evt],_this6);}_this6.on('loadedmetadata',function(){if(_this6.media.width!=_this6.media.videoWidth||_this6.media.height!=_this6.media.videoHeight){_this6.videoWidth();_this6.videoHeight();_this6.emit('resize');}});return _this6;}Player.prototype.settings=function settings(_settings){if(_settings==null)return this.__settings;this.__settings=deepmerge(this.__settings,_settings);//initSettings
  for(var k in this.__settings){if(this[k]){if(k==='autoplay'&&this.__settings[k]){this.play();continue;}this[k](this.__settings[k]);}if(k==='controls'&&this.__settings[k]==="native"){this.nativeControls(true);}}return this.__settings;};Player.prototype.contextMenu=function contextMenu(v){if(typeof v==='boolean'){v?this.media.removeEventListener('contextmenu',fn_contextmenu$1):this.media.addEventListener('contextmenu',fn_contextmenu$1);}};Player.prototype.ajax=function ajax(options){return _ajax(options);};Player.prototype.videoWidth=function videoWidth(v){if(this.media.videoWidth){this.media.width=this.media.videoWidth;return this.media.videoWidth;}if(!isNaN(v)){v=parseFloat(v);this.media.width=v;}return this.media.width;};Player.prototype.videoHeight=function videoHeight(v){if(this.media.videoHeight){this.media.height=this.media.videoHeight;return this.media.videoHeight;}if(!isNaN(v)){v=parseFloat(v);this.media.height=v;}return this.media.height;};Player.prototype.scale=function scale(){return this.videoWidth()/this.videoHeight();};Player.prototype.bounds=function bounds(v){var data=containerBounds(this.media);if(data[v]!==null)return data[v];return data;};Player.prototype.width=function width(){return this.bounds('width');};Player.prototype.height=function height(){return this.bounds('height');};Player.prototype.offsetX=function offsetX(){return this.bounds('offsetX');};Player.prototype.offsetY=function offsetY(){return this.bounds('offsetY');};Player.prototype.wrapperHeight=function wrapperHeight(){return this.media.offsetHeight;};Player.prototype.wrapperWidth=function wrapperWidth(){return this.media.offsetWidth;};Player.prototype.wrapperScale=function wrapperScale(){return this.media.offsetWidth/this.media.offsetHeight;};Player.prototype.addClass=function addClass(v,el){if(el!=null){dom.addClass(v,el);return;}dom.addClass(this.wrapper,v);};Player.prototype.removeClass=function removeClass(v,el){if(el!=null){dom.removeClass(v,el);return;}if(v!=='kmlPlayer'){dom.removeClass(this.wrapper,v);}};Player.prototype.toggleClass=function toggleClass(v,el){if(el!=null){dom.toggleClass(v,el);return;}if(v!=='kmlPlayer'){dom.toggleClass(this.wrapper,v);}};return Player;}(Media);;var videoContainer=function(_Popup){inherits(videoContainer,_Popup);function videoContainer(el,opts,ctx,parentPlayer){classCallCheck(this,videoContainer);var _this7=possibleConstructorReturn(this,_Popup.call(this,el,opts,ctx,parentPlayer));var domVideo=document.createElement('video');_this7.body.appendChild(domVideo);_this7.player=new Player({video:domVideo});_this7.player.container;var paused=false;_this7.on('beforeHide',function(){paused=_this7.player.paused();_this7.player.pause();});_this7.on('show',function(){if(!paused){_this7.player.play();}});_this7.on('ended',function(){if(isFunction(opts.onEnded))opts.onEnded();});opts.sizeRatio=opts.sizeRatio||80;_this7.scaleSize=function(s){opts.sizeRatio=s;this.emit('resize');};_this7.player.on('ended',function(){_this7.emit('ended');});_this7.on('resize',function(){var y=0;var x=0;var w=parentPlayer.width();var h=parentPlayer.height();var r=_this7.player.scale();var fw=w;var fh=h;var ww=w;var hh=h;var headerHeight=10;if(w>r*h){fw=r*h;fh=h;ww=fw;headerHeight=h/10/fh*100;fw=opts.sizeRatio*(fw/w*100)/100;fh=opts.sizeRatio;}else if(h>w/r){fh=w/r;fw=w;hh=fh;headerHeight=h/10/fh*100;fh=opts.sizeRatio*(fh/h*100)/100;fw=opts.sizeRatio;}else{fw=opts.sizeRatio;fh=opts.sizeRatio;};x=(100-fw)/2;y=(100-fh)/2;//this._title.parentNode.style.transform = 'translateY(-100%)';	
  _this7._title.parentNode.style.height=headerHeight+'%';_this7.config({x:x/w*ww+'%',y:5+y/h*hh+'%',width:fw+"%",height:fh+"%"});_this7.autoLineHeight();});parentPlayer.on('loadedmetadata',function(){_this7.emit('resize');});_this7.player.on('loadedmetadata',function(){_this7.emit('resize');});_this7.player.load(opts.url);return _this7;}return videoContainer;}(Popup);var defaults$1={backgroundColor:'',onHide:null,onShow:null,externalControls:true,visible:false,pause:true};var Containers=function(){function Containers(ctx){var _this8=this;classCallCheck(this,Containers);this.wrapper=dom.createElement('div',{class:'kmlContainers'});this._els=[];var ac=new adaptiveSizePos({},ctx);ac.applyTo(this.wrapper);this.enabled=function(v){if(v!=null){if(v==0){v=false;this.wrapper.style.display="none";}if(v){this.wrapper.style.display="block";}ac.enabled(v);}return ac.enabled();};this.checkVisibleElements=function(){var no=0;for(var k in this._els){if(this._els[k].visible()){no+=1;}}this.enabled(no);};ctx.wrapper.appendChild(this.wrapper);var currentVisibles=[];this.hide=function(current){for(var k in this._els){var currentContainer=this._els[k];if(this._els[k]!==current){if(currentContainer.visible()){currentContainer.hide();currentVisibles.push(currentContainer);currentContainer.visible(false);}}}};this.show=function(){for(var k in currentVisibles){currentVisibles[k].show();}currentVisibles=[];};this.add=function(opts){var el=arguments.length<=1||arguments[1]===undefined?{}:arguments[1];var type=arguments[2];var cls='Container';if(type!='container')cls='Popup';var settings=deepmerge(defaults$1,opts);var containerHolder=dom.createElement('div');ctx.addClass(containerHolder,'kml'+cls+' hidden');var kmlContainerBody=dom.createElement('div');if(el){if(!el.nodeType){el=kmlContainerBody;}}else{el=kmlContainerBody;}dom.addClass(el,'body');containerHolder.appendChild(el);var container=null;switch(type){case'video':container=new videoContainer(containerHolder,settings,this,ctx);break;case'popup':container=new Popup(containerHolder,settings,this,ctx);break;default:container=new Container(containerHolder,settings,this,ctx);break;}this._els.push(container);this.wrapper.appendChild(containerHolder);return container;};this.remove=function(container){for(var i=0,n=_this8._els.length;i<n;i+=1){var c=_this8._els[i];if(c.body===container){_this8._els.splice(i,1);if(_this8._els.length==0)_this8.enabled(false);break;}}};}Containers.prototype.els=function els(id){return this._els[id]||this._els;};return Containers;}();/** Virtual DOM Node */function VNode(nodeName,attributes,children){/** @type {string|function} */this.nodeName=nodeName;/** @type {object<string>|undefined} */this.attributes=attributes;/** @type {array<VNode>|undefined} */this.children=children;}// render modes
  var NO_RENDER={render:false};var SYNC_RENDER={renderSync:true};var DOM_RENDER={build:true};var EMPTY={};var EMPTY_BASE='';// is this a DOM environment
  var HAS_DOM=typeof document!=='undefined';var TEXT_CONTENT=!HAS_DOM||'textContent'in document?'textContent':'nodeValue';var ATTR_KEY=typeof Symbol!=='undefined'?Symbol.for('preactattr'):'__preactattr_';var UNDEFINED_ELEMENT='undefined';// DOM properties that should NOT have "px" added when numeric
  var NON_DIMENSION_PROPS={boxFlex:1,boxFlexGroup:1,columnCount:1,fillOpacity:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,fontWeight:1,lineClamp:1,lineHeight:1,opacity:1,order:1,orphans:1,strokeOpacity:1,widows:1,zIndex:1,zoom:1};/** Copy own-properties from `props` onto `obj`.
   *	@returns obj
   *	@private
   */function extend$1(obj,props){for(var _i in props){if(hasOwnProperty.call(props,_i)){obj[_i]=props[_i];}}return obj;}/** Fast clone. Note: does not filter out non-own properties. */function clone(obj){var out={};/*eslint guard-for-in:0*/for(var _i2 in obj){out[_i2]=obj[_i2];}return out;}/** Create a caching wrapper for the given function.
   *	@private
   */function memoize(fn,mem){mem=mem||{};return function(k){return hasOwnProperty.call(mem,k)?mem[k]:mem[k]=fn(k);};}/** Get a deep property value from the given object, expressed in dot-notation.
   *	@private
   */function delve(obj,key){for(var p=key.split('.'),_i3=0;_i3<p.length&&obj;_i3++){obj=obj[p[_i3]];}return obj;}/** Convert an Array-like object to an Array
   *	@private
   */function toArray(obj){var arr=[],i=obj.length;while(i--){arr[i]=obj[i];}return arr;}/** @private is the given object a Function? */var isFunction$1=function isFunction$1(obj){return'function'===typeof obj;};/** @private is the given object a String? */var isString$1=function isString$1(obj){return'string'===typeof obj;};/** @private Safe reference to builtin hasOwnProperty */var hasOwnProperty={}.hasOwnProperty;/** Check if a value is `null` or `undefined`.
   *	@private
   */var empty=function empty(x){return x==null;};/** Check if a value is `null`, `undefined`, or explicitly `false`. */var falsey=function falsey(value){return value===false||value==null;};/** Convert a hashmap of styles to CSSText
   *	@private
   */function styleObjToCss(s){var str='';for(var prop in s){var val=s[prop];if(!empty(val)){if(str)str+=' ';str+=jsToCss(prop);str+=': ';str+=val;if(typeof val==='number'&&!NON_DIMENSION_PROPS[prop]){str+='px';}str+=';';}}return str;}/** Convert a hashmap of CSS classes to a space-delimited className string
   *	@private
   */function hashToClassName(c){var str='';for(var prop in c){if(c[prop]){if(str)str+=' ';str+=prop;}}return str;}/** Convert a JavaScript camel-case CSS property name to a CSS property name
   *	@private
   *	@function
   */var jsToCss=memoize(function(s){return s.replace(/([A-Z])/g,'-$1').toLowerCase();});/** Just a memoized String.prototype.toLowerCase */var toLowerCase=memoize(function(s){return s.toLowerCase();});// For animations, rAF is vastly superior. However, it scores poorly on benchmarks :(
  // export const setImmediate = typeof requestAnimationFrame==='function' ? requestAnimationFrame : setTimeout;
  var ch=void 0;try{ch=new MessageChannel();}catch(e){}/** Call a function asynchronously, as soon as possible.
   *	@param {Function} callback
   */var setImmediate=ch?function(f){ch.port1.onmessage=f;ch.port2.postMessage('');}:setTimeout;/** Global options
   *	@public
   *	@namespace options {Object}
   */var options={/** If `true`, `prop` changes trigger synchronous component updates.
  	 *	@name syncComponentUpdates
  	 *	@type Boolean
  	 *	@default true
  	 *///syncComponentUpdates: true,
  /** Processes all created VNodes.
  	 *	@param {VNode} vnode	A newly-created VNode to normalize/process
  	 */vnode:function vnode(n){var attrs=n.attributes;if(!attrs||isFunction$1(n.nodeName))return;// normalize className to class.
  var p=attrs.className;if(p){attrs['class']=p;delete attrs.className;}if(attrs['class'])normalize(attrs,'class',hashToClassName);if(attrs.style)normalize(attrs,'style',styleObjToCss);}};function normalize(obj,prop,fn){var v=obj[prop];if(v&&!isString$1(v)){obj[prop]=fn(v);}}/** Invoke a hook on the `options` export. */function optionsHook(name,a,b){return hook(options,name,a,b);}/** Invoke a "hook" method with arguments if it exists.
   *	@private
   */function hook(obj,name,a,b,c){if(obj[name])return obj[name](a,b,c);}/** Invoke hook() on a component and child components (recursively)
   *	@private
   */function deepHook(obj,type){do{hook(obj,type);}while(obj=obj._component);}var SHARED_TEMP_ARRAY=[];/** JSX/hyperscript reviver
   *	@see http://jasonformat.com/wtf-is-jsx
   *	@public
   *  @example
   *  /** @jsx h *\/
   *  import { render, h } from 'preact';
   *  render(<span>foo</span>, document.body);
   */function h(nodeName,attributes){var len=arguments.length,attributeChildren=attributes&&attributes.children,children=void 0,arr=void 0,lastSimple=void 0;if(attributeChildren){delete attributes.children;// if (len<3) {
  // 	unfilteredChildren = attributeChildren;
  // 	start = 0;
  // }
  if(len<3)return h(nodeName,attributes,attributeChildren);}for(var _i4=2;_i4<len;_i4++){var _p=arguments[_i4];if(falsey(_p))continue;if(!children)children=[];if(_p.join){arr=_p;}else{arr=SHARED_TEMP_ARRAY;arr[0]=_p;}for(var j=0;j<arr.length;j++){var child=arr[j],simple=!falsey(child)&&!(child instanceof VNode);if(simple)child=String(child);if(simple&&lastSimple){children[children.length-1]+=child;}else if(!falsey(child)){children.push(child);}lastSimple=simple;}}var p=new VNode(nodeName,attributes||undefined,children||undefined);optionsHook('vnode',p);return p;}/** Create an Event handler function that sets a given state property.
   *	@param {Component} component	The component whose state should be updated
   *	@param {string} key				A dot-notated key path to update in the component's state
   *	@param {string} eventPath		A dot-notated key path to the value that should be retrieved from the Event or component
   *	@returns {function} linkedStateHandler
   *	@private
   */function createLinkedState(component,key,eventPath){var path=key.split('.'),p0=path[0],len=path.length;return function(e){var t=this,s=component.state,obj=s,v=void 0,i=void 0;if(isString$1(eventPath)){v=delve(e,eventPath);if(empty(v)&&(t=t._component)){v=delve(t,eventPath);}}else{v=(t.nodeName+t.type).match(/^input(check|rad)/i)?t.checked:t.value;}if(isFunction$1(v))v=v.call(t);if(len>1){for(i=0;i<len-1;i++){obj=obj[path[i]]||(obj[path[i]]={});}obj[path[i]]=v;v=s[p0];}component.setState(defineProperty({},p0,v));};}var items=[];var itemsOffline=[];function enqueueRender(component){if(items.push(component)!==1)return;(options.debounceRendering||setImmediate)(rerender);}function rerender(){if(!items.length)return;var currentItems=items,p=void 0;// swap online & offline
  items=itemsOffline;itemsOffline=currentItems;while(p=currentItems.pop()){if(p._dirty)renderComponent(p);}}/** Check if a VNode is a reference to a stateless functional component.
   *	A function component is represented as a VNode whose `nodeName` property is a reference to a function.
   *	If that function is not a Component (ie, has no `.render()` method on a prototype), it is considered a stateless functional component.
   *	@param {VNode} vnode	A VNode
   *	@private
   */function isFunctionalComponent(_ref){var nodeName=_ref.nodeName;return isFunction$1(nodeName)&&!(nodeName.prototype&&nodeName.prototype.render);}/** Construct a resultant VNode from a VNode referencing a stateless functional component.
   *	@param {VNode} vnode	A VNode with a `nodeName` property that is a reference to a function.
   *	@private
   */function buildFunctionalComponent(vnode,context){return vnode.nodeName(getNodeProps(vnode),context||EMPTY)||EMPTY_BASE;}function ensureNodeData(node){return node[ATTR_KEY]||(node[ATTR_KEY]={});}function getNodeType(node){return node.nodeType;}/** Append multiple children to a Node.
   *	Uses a Document Fragment to batch when appending 2 or more children
   *	@private
   */function appendChildren(parent,children){var len=children.length,many=len>2,into=many?document.createDocumentFragment():parent;for(var _i5=0;_i5<len;_i5++){into.appendChild(children[_i5]);}if(many)parent.appendChild(into);}/** Removes a given DOM Node from its parent. */function removeNode(node){var p=node.parentNode;if(p)p.removeChild(node);}/** Retrieve the value of a rendered attribute
   *	@private
   */function getAccessor(node,name,value,cache){if(name!=='type'&&name!=='style'&&name in node)return node[name];var attrs=node[ATTR_KEY];if(cache!==false&&attrs&&hasOwnProperty.call(attrs,name))return attrs[name];if(name==='class')return node.className;if(name==='style')return node.style.cssText;return value;}/** Set a named attribute on the given Node, with special behavior for some names and event handlers.
   *	If `value` is `null`, the attribute/handler will be removed.
   *	@param {Element} node	An element to mutate
   *	@param {string} name	The name/key to set, such as an event or attribute name
   *	@param {any} value		An attribute value, such as a function to be used as an event handler
   *	@param {any} previousValue	The last value that was set for this name/node pair
   *	@private
   */function setAccessor(node,name,value){if(name==='class'){node.className=value||'';}else if(name==='style'){node.style.cssText=value||'';}else if(name==='dangerouslySetInnerHTML'){if(value&&value.__html)node.innerHTML=value.__html;}else if(name==='key'||name in node&&name!=='type'){node[name]=value;if(falsey(value))node.removeAttribute(name);}else{setComplexAccessor(node,name,value);}ensureNodeData(node)[name]=value;}/** For props without explicit behavior, apply to a Node as event handlers or attributes.
   *	@private
   */function setComplexAccessor(node,name,value){if(name.substring(0,2)==='on'){var _type=normalizeEventName(name),l=node._listeners||(node._listeners={}),fn=!l[_type]?'add':!value?'remove':null;if(fn)node[fn+'EventListener'](_type,eventProxy);l[_type]=value;return;}var type=typeof value==='undefined'?'undefined':_typeof(value);if(falsey(value)){node.removeAttribute(name);}else if(type!=='function'&&type!=='object'){node.setAttribute(name,value);}}/** Proxy an event to hooked event handlers
   *	@private
   */function eventProxy(e){var fn=this._listeners[normalizeEventName(e.type)];if(fn)return fn.call(this,optionsHook('event',e)||e);}/** Convert an Event name/type to lowercase and strip any "on*" prefix.
   *	@function
   *	@private
   */var normalizeEventName=memoize(function(t){return t.replace(/^on/i,'').toLowerCase();});/** Get a hashmap of node properties, preferring preact's cached property values over the DOM's
   *	@private
   */function getNodeAttributes(node){return node[ATTR_KEY]||getRawNodeAttributes(node)||EMPTY;// let list = getRawNodeAttributes(node),
  // 	l = node[ATTR_KEY];
  // return l && list ? extend(list, l) : (l || list || EMPTY);
  }/** Get a node's attributes as a hashmap, regardless of type.
   *	@private
   */function getRawNodeAttributes(node){var list=node.attributes;if(!list||!list.getNamedItem)return list;return getAttributesAsObject(list);}/** Convert a DOM `.attributes` NamedNodeMap to a hashmap.
   *	@private
   */function getAttributesAsObject(list){var attrs=void 0;for(var _i6=list.length;_i6--;){var item=list[_i6];if(!attrs)attrs={};attrs[item.name]=item.value;}return attrs;}/** Check if two nodes are equivalent.
   *	@param {Element} node
   *	@param {VNode} vnode
   *	@private
   */function isSameNodeType(node,vnode){if(isFunctionalComponent(vnode))return true;var nodeName=vnode.nodeName;if(isFunction$1(nodeName))return node._componentConstructor===nodeName;if(getNodeType(node)===3)return isString$1(vnode);return toLowerCase(node.nodeName)===nodeName;}/**
   * Reconstruct Component-style `props` from a VNode.
   * Ensures default/fallback values from `defaultProps`:
   * Own-properties of `defaultProps` not present in `vnode.attributes` are added.
   * @param {VNode} vnode
   * @returns {Object} props
   */function getNodeProps(vnode){var props=clone(vnode.attributes),c=vnode.children;if(c)props.children=c;var defaultProps=vnode.nodeName.defaultProps;if(defaultProps){for(var _i7 in defaultProps){if(hasOwnProperty.call(defaultProps,_i7)&&!(_i7 in props)){props[_i7]=defaultProps[_i7];}}}return props;}/** DOM node pool, keyed on nodeName. */var nodes={};var normalizeName=memoize(function(name){return name.toUpperCase();});function collectNode(node){cleanNode(node);var name=normalizeName(node.nodeName),list=nodes[name];if(list)list.push(node);else nodes[name]=[node];}function createNode(nodeName){var name=normalizeName(nodeName),list=nodes[name],node=list&&list.pop()||document.createElement(nodeName);ensureNodeData(node);return node;}function cleanNode(node){removeNode(node);if(getNodeType(node)===3)return;// When reclaiming externally created nodes, seed the attribute cache: (Issue #97)
  if(!node[ATTR_KEY]){node[ATTR_KEY]=getRawNodeAttributes(node);}node._component=node._componentConstructor=null;// if (node.childNodes.length>0) {
  // 	console.trace(`Warning: Recycler collecting <${node.nodeName}> with ${node.childNodes.length} children.`);
  // 	for (let i=node.childNodes.length; i--; ) collectNode(node.childNodes[i]);
  // }
  }/** Apply differences in a given vnode (and it's deep children) to a real DOM Node.
   *	@param {Element} [dom=null]		A DOM node to mutate into the shape of the `vnode`
   *	@param {VNode} vnode			A VNode (with descendants forming a tree) representing the desired DOM structure
   *	@returns {Element} dom			The created/mutated element
   *	@private
   */function diff(dom,vnode,context){var originalAttributes=vnode.attributes;while(isFunctionalComponent(vnode)){vnode=buildFunctionalComponent(vnode,context);}if(isFunction$1(vnode.nodeName)){return buildComponentFromVNode(dom,vnode,context);}if(isString$1(vnode)){if(dom){var type=getNodeType(dom);if(type===3){dom[TEXT_CONTENT]=vnode;return dom;}else if(type===1){collectNode(dom);}}return document.createTextNode(vnode);}// return diffNode(dom, vnode, context);
  // }
  /** Morph a DOM node to look like the given VNode. Creates DOM if it doesn't exist. */// function diffNode(dom, vnode, context) {
  var out=dom,nodeName=vnode.nodeName||UNDEFINED_ELEMENT;if(!dom){out=createNode(nodeName);}else if(toLowerCase(dom.nodeName)!==nodeName){out=createNode(nodeName);// move children into the replacement node
  appendChildren(out,toArray(dom.childNodes));// reclaim element nodes
  recollectNodeTree(dom);}innerDiffNode(out,vnode,context);diffAttributes(out,vnode);if(originalAttributes&&originalAttributes.ref){(out[ATTR_KEY].ref=originalAttributes.ref)(out);}return out;}/** Apply child and attribute changes between a VNode and a DOM Node to the DOM. */function innerDiffNode(dom,vnode,context){var children=void 0,keyed=void 0,keyedLen=0,len=dom.childNodes.length,childrenLen=0;if(len){children=[];for(var _i8=0;_i8<len;_i8++){var child=dom.childNodes[_i8],key=child._component?child._component.__key:getAccessor(child,'key');if(!empty(key)){if(!keyed)keyed={};keyed[key]=child;keyedLen++;}else{children[childrenLen++]=child;}}}var vchildren=vnode.children,vlen=vchildren&&vchildren.length,min=0;if(vlen){for(var _i9=0;_i9<vlen;_i9++){var vchild=vchildren[_i9],_child=void 0;// if (isFunctionalComponent(vchild)) {
  // 	vchild = buildFunctionalComponent(vchild);
  // }
  // attempt to find a node based on key matching
  if(keyedLen){var attrs=vchild.attributes,_key=attrs&&attrs.key;if(!empty(_key)&&hasOwnProperty.call(keyed,_key)){_child=keyed[_key];keyed[_key]=null;keyedLen--;}}// attempt to pluck a node of the same type from the existing children
  if(!_child&&min<childrenLen){for(var j=min;j<childrenLen;j++){var c=children[j];if(c&&isSameNodeType(c,vchild)){_child=c;children[j]=null;if(j===childrenLen-1)childrenLen--;if(j===min)min++;break;}}}// morph the matched/found/created DOM child to match vchild (deep)
  _child=diff(_child,vchild,context);if(dom.childNodes[_i9]!==_child){var _c=_child.parentNode!==dom&&_child._component,next=dom.childNodes[_i9+1];if(_c)deepHook(_c,'componentWillMount');if(next){dom.insertBefore(_child,next);}else{dom.appendChild(_child);}if(_c)deepHook(_c,'componentDidMount');}}}if(keyedLen){/*eslint guard-for-in:0*/for(var _i10 in keyed){if(hasOwnProperty.call(keyed,_i10)&&keyed[_i10]){children[min=childrenLen++]=keyed[_i10];}}}// remove orphaned children
  if(min<childrenLen){removeOrphanedChildren(children);}}/** Reclaim children that were unreferenced in the desired VTree */function removeOrphanedChildren(children,unmountOnly){for(var _i11=children.length;_i11--;){var child=children[_i11];if(child){recollectNodeTree(child,unmountOnly);}}}/** Reclaim an entire tree of nodes, starting at the root. */function recollectNodeTree(node,unmountOnly){// @TODO: Need to make a call on whether Preact should remove nodes not created by itself.
  // Currently it *does* remove them. Discussion: https://github.com/developit/preact/issues/39
  //if (!node[ATTR_KEY]) return;
  var attrs=node[ATTR_KEY];if(attrs)hook(attrs,'ref',null);var component=node._component;if(component){unmountComponent(component,!unmountOnly);}else{if(!unmountOnly){if(getNodeType(node)!==1){removeNode(node);return;}collectNode(node);}var c=node.childNodes;if(c&&c.length){removeOrphanedChildren(c,unmountOnly);}}}/** Apply differences in attributes from a VNode to the given DOM Node. */function diffAttributes(dom,vnode){var old=getNodeAttributes(dom)||EMPTY,attrs=vnode.attributes||EMPTY,name=void 0,value=void 0;// removed
  for(name in old){if(empty(attrs[name])){setAccessor(dom,name,null);}}// new & updated
  if(attrs!==EMPTY){for(name in attrs){if(hasOwnProperty.call(attrs,name)){value=attrs[name];if(!empty(value)&&value!=getAccessor(dom,name)){setAccessor(dom,name,value);}}}}}/** Retains a pool of Components for re-use, keyed on component name.
   *	Note: since component names are not unique or even necessarily available, these are primarily a form of sharding.
   *	@private
   */var components={};function collectComponent(component){var name=component.constructor.name,list=components[name];if(list)list.push(component);else components[name]=[component];}function createComponent(Ctor,props,context){var list=components[Ctor.name],len=list&&list.length,c=void 0;for(var _i12=0;_i12<len;_i12++){c=list[_i12];if(c.constructor===Ctor){list.splice(_i12,1);var inst=new Ctor(props,context);inst.nextBase=c.base;return inst;}}return new Ctor(props,context);}/** Mark component as dirty and queue up a render.
   *	@param {Component} component
   *	@private
   */function triggerComponentRender(component){if(!component._dirty){component._dirty=true;enqueueRender(component);}}/** Set a component's `props` (generally derived from JSX attributes).
   *	@param {Object} props
   *	@param {Object} [opts]
   *	@param {boolean} [opts.renderSync=false]	If `true` and {@link options.syncComponentUpdates} is `true`, triggers synchronous rendering.
   *	@param {boolean} [opts.render=true]			If `false`, no render will be triggered.
   */function setComponentProps(component,props,opts,context){var d=component._disableRendering;component.__ref=props.ref;component.__key=props.key;delete props.ref;delete props.key;component._disableRendering=true;if(context){if(!component.prevContext)component.prevContext=component.context;component.context=context;}if(component.base){hook(component,'componentWillReceiveProps',props,component.context);}if(!component.prevProps)component.prevProps=component.props;component.props=props;component._disableRendering=d;if(!opts||opts.render!==false){if(opts&&opts.renderSync||options.syncComponentUpdates!==false){renderComponent(component);}else{triggerComponentRender(component);}}hook(component,'__ref',component);}/** Render a Component, triggering necessary lifecycle events and taking High-Order Components into account.
   *	@param {Component} component
   *	@param {Object} [opts]
   *	@param {boolean} [opts.build=false]		If `true`, component will build and store a DOM node if not already associated with one.
   *	@private
   */function renderComponent(component,opts){if(component._disableRendering)return;var skip=void 0,rendered=void 0,props=component.props,state=component.state,context=component.context,previousProps=component.prevProps||props,previousState=component.prevState||state,previousContext=component.prevContext||context,isUpdate=component.base,initialBase=isUpdate||component.nextBase;// if updating
  if(isUpdate){component.props=previousProps;component.state=previousState;component.context=previousContext;if(hook(component,'shouldComponentUpdate',props,state,context)===false){skip=true;}else{hook(component,'componentWillUpdate',props,state,context);}component.props=props;component.state=state;component.context=context;}component.prevProps=component.prevState=component.prevContext=component.nextBase=null;component._dirty=false;if(!skip){rendered=hook(component,'render',props,state,context);var childComponent=rendered&&rendered.nodeName,childContext=component.getChildContext?component.getChildContext():context,// @TODO might want to clone() new context obj
  toUnmount=void 0,base=void 0;if(isFunction$1(childComponent)&&childComponent.prototype.render){// set up high order component link
  var inst=component._component;if(inst&&inst.constructor!==childComponent){toUnmount=inst;inst=null;}var childProps=getNodeProps(rendered);if(inst){setComponentProps(inst,childProps,SYNC_RENDER,childContext);}else{inst=createComponent(childComponent,childProps,childContext);inst._parentComponent=component;component._component=inst;if(isUpdate)deepHook(inst,'componentWillMount');setComponentProps(inst,childProps,NO_RENDER,childContext);renderComponent(inst,DOM_RENDER);if(isUpdate)deepHook(inst,'componentDidMount');}base=inst.base;}else{var cbase=initialBase;// destroy high order component link
  toUnmount=component._component;if(toUnmount){cbase=component._component=null;}if(initialBase||opts&&opts.build){base=diff(cbase,rendered||EMPTY_BASE,childContext);}}if(initialBase&&base!==initialBase){var p=initialBase.parentNode;if(p&&base!==p)p.replaceChild(base,initialBase);}if(toUnmount){unmountComponent(toUnmount,true);}component.base=base;if(base){var componentRef=component,t=component;while(t=t._parentComponent){componentRef=t;}base._component=componentRef;base._componentConstructor=componentRef.constructor;}if(isUpdate){hook(component,'componentDidUpdate',previousProps,previousState,previousContext);}}var cb=component._renderCallbacks,fn=void 0;if(cb)while(fn=cb.pop()){fn.call(component);}return rendered;}/** Apply the Component referenced by a VNode to the DOM.
   *	@param {Element} dom	The DOM node to mutate
   *	@param {VNode} vnode	A Component-referencing VNode
   *	@returns {Element} dom	The created/mutated element
   *	@private
   */function buildComponentFromVNode(dom,vnode,context){var c=dom&&dom._component,oldDom=dom;var isOwner=c&&dom._componentConstructor===vnode.nodeName;while(c&&!isOwner&&(c=c._parentComponent)){isOwner=c.constructor===vnode.nodeName;}if(isOwner){setComponentProps(c,getNodeProps(vnode),SYNC_RENDER,context);dom=c.base;}else{if(c){unmountComponent(c,true);dom=oldDom=null;}dom=createComponentFromVNode(vnode,dom,context);if(oldDom&&dom!==oldDom){oldDom._component=null;recollectNodeTree(oldDom);}}return dom;}/** Instantiate and render a Component, given a VNode whose nodeName is a constructor.
   *	@param {VNode} vnode
   *	@private
   */function createComponentFromVNode(vnode,dom,context){var props=getNodeProps(vnode);var component=createComponent(vnode.nodeName,props,context);if(dom&&!component.base)component.base=dom;setComponentProps(component,props,NO_RENDER,context);renderComponent(component,DOM_RENDER);// let node = component.base;
  //if (!node._component) {
  //	node._component = component;
  //	node._componentConstructor = vnode.nodeName;
  //}
  return component.base;}/** Remove a component from the DOM and recycle it.
   *	@param {Element} dom			A DOM node from which to unmount the given Component
   *	@param {Component} component	The Component instance to unmount
   *	@private
   */function unmountComponent(component,remove){// console.log(`${remove?'Removing':'Unmounting'} component: ${component.constructor.name}`, component);
  hook(component,'__ref',null);hook(component,'componentWillUnmount');// recursively tear down & recollect high-order component children:
  var inner=component._component;if(inner){unmountComponent(inner,remove);remove=false;}var base=component.base;if(base){if(remove!==false)removeNode(base);removeOrphanedChildren(base.childNodes,true);}if(remove){component._parentComponent=null;collectComponent(component);}hook(component,'componentDidUnmount');}/** Base Component class, for he ES6 Class method of creating Components
   *	@public
   *
   *	@example
   *	class MyFoo extends Component {
   *		render(props, state) {
   *			return <div />;
   *		}
   *	}
   */function Component(props,context){/** @private */this._dirty=this._disableRendering=false;/** @public */this.prevState=this.prevProps=this.prevContext=this.base=this.nextBase=this._parentComponent=this._component=this.__ref=this.__key=this._linkedStates=this._renderCallbacks=null;/** @public */this.context=context||{};/** @type {object} */this.props=props;/** @type {object} */this.state=hook(this,'getInitialState')||{};}extend$1(Component.prototype,{/** Returns a `boolean` value indicating if the component should re-render when receiving the given `props` and `state`.
  	 *	@param {object} nextProps
  	 *	@param {object} nextState
  	 *	@param {object} nextContext
  	 *	@returns {Boolean} should the component re-render
  	 *	@name shouldComponentUpdate
  	 *	@function
  	 */// shouldComponentUpdate() {
  // 	return true;
  // },
  /** Returns a function that sets a state property when called.
  	 *	Calling linkState() repeatedly with the same arguments returns a cached link function.
  	 *
  	 *	Provides some built-in special cases:
  	 *		- Checkboxes and radio buttons link their boolean `checked` value
  	 *		- Inputs automatically link their `value` property
  	 *		- Event paths fall back to any associated Component if not found on an element
  	 *		- If linked value is a function, will invoke it and use the result
  	 *
  	 *	@param {string} key				The path to set - can be a dot-notated deep key
  	 *	@param {string} [eventPath]		If set, attempts to find the new state value at a given dot-notated path within the object passed to the linkedState setter.
  	 *	@returns {function} linkStateSetter(e)
  	 *
  	 *	@example Update a "text" state value when an input changes:
  	 *		<input onChange={ this.linkState('text') } />
  	 *
  	 *	@example Set a deep state value on click
  	 *		<button onClick={ this.linkState('touch.coords', 'touches.0') }>Tap</button
  	 */linkState:function linkState(key,eventPath){var c=this._linkedStates||(this._linkedStates={}),cacheKey=key+'|'+(eventPath||'');return c[cacheKey]||(c[cacheKey]=createLinkedState(this,key,eventPath));},/** Update component state by copying properties from `state` to `this.state`.
  	 *	@param {object} state		A hash of state properties to update with new values
  	 */setState:function setState(state,callback){var s=this.state;if(!this.prevState)this.prevState=clone(s);extend$1(s,isFunction$1(state)?state(s,this.props):state);if(callback)(this._renderCallbacks=this._renderCallbacks||[]).push(callback);triggerComponentRender(this);},/** Immediately perform a synchronous re-render of the component.
  	 *	@private
  	 */forceUpdate:function forceUpdate(){renderComponent(this);},/** Accepts `props` and `state`, and returns a new Virtual DOM tree to build.
  	 *	Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).
  	 *	@param {object} props		Props (eg: JSX attributes) received from parent element/component
  	 *	@param {object} state		The component's current state
  	 *	@param {object} context		Context object (if a parent component has provided context)
  	 *	@returns VNode
  	 */render:function render(){return null;}});/** Render JSX into a `parent` Element.
   *	@param {VNode} vnode		A (JSX) VNode to render
   *	@param {Element} parent		DOM element to render into
   *	@param {Element} [merge]	Attempt to re-use an existing DOM tree rooted at `merge`
   *	@public
   *
   *	@example
   *	// render a div into <body>:
   *	render(<div id="hello">hello!</div>, document.body);
   *
   *	@example
   *	// render a "Thing" component into #foo:
   *	const Thing = ({ name }) => <span>{ name }</span>;
   *	render(<Thing name="one" />, document.querySelector('#foo'));
   */function render(vnode,parent,merge){var existing=merge&&merge._component&&merge._componentConstructor===vnode.nodeName,built=diff(merge,vnode),c=!existing&&built._component;if(c)deepHook(c,'componentWillMount');if(built.parentNode!==parent){parent.appendChild(built);}if(c)deepHook(c,'componentDidMount');return built;}var Clock=function(_Component){inherits(Clock,_Component);function Clock(){classCallCheck(this,Clock);// set initial time:
  var _this9=possibleConstructorReturn(this,_Component.call(this));_this9.state.time=Date.now();return _this9;}Clock.prototype.componentDidMount=function componentDidMount(){var _this10=this;// update time every second
  this.timer=setInterval(function(){_this10.setState({time:Date.now()});},1000);};Clock.prototype.componentWillUnmount=function componentWillUnmount(){// stop when not renderable
  clearInterval(this.timer);};Clock.prototype.render=function render(props,state){var time=new Date(state.time).toLocaleTimeString();return h('span',null,time);};return Clock;}(Component);function _clock(el){render(h(Clock,null),el||document.body);}var fn_contextmenu=function fn_contextmenu(e){e.stopPropagation();e.preventDefault();return false;};var defaults={videoWidth:920,videoHeight:520,autoplay:false,loop:false,controls:false,font:{ratio:1,min:.5,units:"em"}};var kmlPlayer=function(_Media2){inherits(kmlPlayer,_Media2);function kmlPlayer(settings,_events,app){classCallCheck(this,kmlPlayer);var el=settings.video;var _this11=possibleConstructorReturn(this,_Media2.call(this,el));_this11.iframe=inIframe();if(el==null)return possibleConstructorReturn(_this11);_this11._bounds={};_this11.device=device;_this11.__settings=deepmerge(defaults,settings);dom.addClass(el,"kml"+capitalizeFirstLetter(el.nodeName.toLowerCase()));_this11.wrapper=dom.wrap(_this11.media,dom.createElement('div',{class:'kmlPlayer'}));dom.triggerWebkitHardwareAcceleration(_this11.wrapper);if(_this11.inIframe){dom.addClass(_this11.wrapper,"inFrame");}//initSettings
  for(var k in _this11.__settings){if(_this11[k]){if(k==='autoplay'&&_this11.__settings[k]&&!_this11.inIframe){_this11.play();continue;}_this11[k](_this11.__settings[k]);}if(k==='controls'&&_this11.__settings[k]==="native"){_this11.nativeControls(true);}}//initPageVisibility
  _this11.pageVisibility=new pageVisibility(el);//initexternalControls
  _this11.externalControls=new externalControls(el);//initContainers
  _this11.containers=new Containers(_this11);_this11.container=function(stg,el){return this.containers.add(stg,el,'container');};_this11.videoContainer=function(stg){return this.containers.add(stg,null,'video');};_this11.popupContainer=function(stg){return this.containers.add(stg,null,'popup');};//autoFONT
  if(typeof _this11.__settings.font==="boolean"&&_this11.__settings.font)_this11.__settings.font=defaults.font;_this11.autoFont=new autoFont(_this11.wrapper,_this11.__settings.font,_this11);if(_this11.__settings.font)_this11.autoFont.enabled(true);//initCallbackEvents
  for(var evt in _events){_this11.on(evt,_events[evt],_this11);}if(typeof app==='function'){app.bind(_this11);}_this11.on('loadedmetadata',function(){if(_this11.media.width!=_this11.media.videoWidth||_this11.media.height!=_this11.media.videoHeight){_this11.videoWidth();_this11.videoHeight();_this11.emit('resize');}if(!_this11._app){app.bind(_this11)();_this11._app=true;}});el.addEventListener('dbltap',function(){_this11.toggleFullScreen();});var videoSizeCache={w:_this11.width(),x:_this11.offsetX(),y:_this11.offsetY(),h:_this11.height()};var checkVideoResize=function checkVideoResize(){_this11._bounds=containerBounds(_this11.media);var w=_this11.width();var h=_this11.width();var x=_this11.offsetX();var y=_this11.offsetY();if(videoSizeCache.w!=w||videoSizeCache.h!=h||videoSizeCache.x!=x||videoSizeCache.y!=y){videoSizeCache.w=w;videoSizeCache.h=h;videoSizeCache.x=x;videoSizeCache.y=y;_this11.emit('resize');}window.requestAnimationFrame(checkVideoResize);};checkVideoResize();return _this11;}kmlPlayer.prototype.contextMenu=function contextMenu(v){if(typeof v==='boolean'){v?this.media.removeEventListener('contextmenu',fn_contextmenu):this.media.addEventListener('contextmenu',fn_contextmenu);}};kmlPlayer.prototype.ajax=function ajax(options){return _ajax(options);};kmlPlayer.prototype.videoWidth=function videoWidth(v){if(this.media.videoWidth){this.media.width=this.media.videoWidth;return this.media.videoWidth;}if(!isNaN(v)){v=parseFloat(v);this.media.width=v;}return this.media.width;};kmlPlayer.prototype.videoHeight=function videoHeight(v){if(this.media.videoHeight){this.media.height=this.media.videoHeight;return this.media.videoHeight;}if(!isNaN(v)){v=parseFloat(v);this.media.height=v;}return this.media.height;};kmlPlayer.prototype.scale=function scale(){return this.videoWidth()/this.videoHeight();};kmlPlayer.prototype.bounds=function bounds(v){if(this._bounds[v]!==null)return this._bounds[v];return this._bounds;};kmlPlayer.prototype.width=function width(){return this.bounds('width');};kmlPlayer.prototype.height=function height(){return this.bounds('height');};kmlPlayer.prototype.offsetX=function offsetX(){return this.bounds('offsetX');};kmlPlayer.prototype.offsetY=function offsetY(){return this.bounds('offsetY');};kmlPlayer.prototype.wrapperHeight=function wrapperHeight(){return this.media.offsetHeight;};kmlPlayer.prototype.wrapperWidth=function wrapperWidth(){return this.media.offsetWidth;};kmlPlayer.prototype.wrapperScale=function wrapperScale(){return this.media.offsetWidth/this.media.offsetHeight;};kmlPlayer.prototype.addClass=function addClass(v,el){if(el!=null){dom.addClass(v,el);return;}dom.addClass(this.wrapper,v);};kmlPlayer.prototype.removeClass=function removeClass(v,el){if(el!=null){dom.removeClass(v,el);return;}if(v!=='kmlPlayer'){dom.removeClass(this.wrapper,v);}};kmlPlayer.prototype.toggleClass=function toggleClass(v,el){if(el!=null){dom.toggleClass(v,el);return;}if(v!=='kmlPlayer'){dom.toggleClass(this.wrapper,v);}};kmlPlayer.prototype.clock=function clock(){return _clock;};return kmlPlayer;}(Media);;//disable on production
  if(device.isTouch){window.onerror=function(message,scriptUrl,line,column){console.log(line,column,message);alert(line+":"+column+"-"+message);};}

  return kmlPlayer;

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
